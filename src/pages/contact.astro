---
import Layout from "../layouts/Layout.astro";

// Should probably use env vars for this!
const WEB3_FORMS_ACCESS_KEY = "YOUR_ACCESS_KEY_HERE";
---

<Layout>
    <contact-form>
        <div class="flex justify-center items-center h-full w-full flex-col gap-4">
            <div class="flex justify-between items-center min-w-md">
                <h2 class="text-2xl">Get in touch</h2>
                <a class="outline-1 p-2 mt-4" href="/">Go back</a>
            </div>

            <form id="form" class="needs-validation min-w-md" novalidate>
                <input type="hidden" name="access_key" value={WEB3_FORMS_ACCESS_KEY} />
                <input type="checkbox" class="hidden" style="display:none" name="botcheck" />

                <div class="mb-5">
                    <input
                        type="text"
                        placeholder="Full Name"
                        required
                        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none focus:ring-4 border-slate-300 focus:border-slate-600 ring-slate-100"
                        name="name"
                    />
                    <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">Please provide your full name.</div>
                </div>
                <div class="mb-5">
                    <label for="email_address" class="sr-only">Email Address</label>
                    <input
                        id="email_address"
                        type="email"
                        placeholder="Email Address"
                        name="email"
                        required
                        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none focus:ring-4 border-slate-300 focus:border-slate-600 ring-slate-100"
                    />
                    <div class="empty-feedback text-red-400 text-sm mt-1">Please provide your email address.</div>
                    <div class="invalid-feedback text-red-400 text-sm mt-1">Please provide a valid email address.</div>
                </div>
                <div class="mb-3">
                    <textarea
                        name="message"
                        required
                        placeholder="Your Message"
                        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none h-36 focus:ring-4 border-slate-300 focus:border-slate-600 ring-slate-100"
                    ></textarea>
                    <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">Please enter your message.</div>
                </div>
				<!-- hCaptcha container -->
                <div id="hcaptcha"></div>
                <button class="outline-1 p-2 mt-4 cursor-pointer" type="submit">Send Message</button>
                <div id="result" class="mt-3 text-center"></div>
            </form>
        </div>
    </contact-form>
    <script
        is:inline
        data-astro-rerun
        src="https://js.hcaptcha.com/1/api.js?hl=en&onload=captchaInit&render=explicit"
        defer></script>
    <script is:inline>
		///<reference types="@hcaptcha/types"/>

        window.captchaInit = function captchaInit() {
            if (window.hcaptcha) {
				// The site key is public
				// https://docs.web3forms.com/getting-started/customizations/spam-protection/hcaptcha#manual-setup
                hcaptcha.render("hcaptcha", { sitekey: "50b2fe65-b00b-4b9e-ad62-3ba471098be2" });
            }
        };
    </script>
</Layout>

<style>
    .invalid-feedback,
    .empty-feedback {
        display: none;
    }

    .was-validated :placeholder-shown:invalid ~ .empty-feedback {
        display: block;
    }

    .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
        display: block;
    }

    .is-invalid,
    .was-validated :invalid {
        border-color: #dc3545;
    }
</style>

<script>
    class ContactForm extends HTMLElement {
        connectedCallback() {
            this.InitForm();
        }

        InitForm() {
            const form = this.querySelector<HTMLFormElement>("#form")!;
            const result = this.querySelector<HTMLDivElement>("#result")!;

            form.addEventListener("submit", function (e) {
                e.preventDefault();
                form.classList.add("was-validated");
                if (!form.checkValidity()) {
                    form.querySelectorAll<HTMLElement>(":invalid")[0].focus();
                    return;
                }
                const hCaptcha = form.querySelector<HTMLTextAreaElement>("textarea[name=h-captcha-response]")!.value;
                const formData = new FormData(form);
                const object = Object.fromEntries(formData);
                const json = JSON.stringify(object);

                if (!hCaptcha) {
                    e.preventDefault();
                    alert("Please fill out captcha field");
                    return;
                }

                result.innerHTML = "Sending...";

                fetch("https://api.web3forms.com/submit", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Accept: "application/json",
                    },
                    body: json,
                })
                    .then(async (response) => {
                        let json = await response.json();
                        if (response.status == 200) {
                            result.classList.add("text-green-500");
                            result.innerHTML = json.message;
                        } else {
                            console.log(response);
                            result.classList.add("text-red-500");
                            result.innerHTML = json.message;
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                        result.innerHTML = "Something went wrong!";
                    })
                    .then(function () {
                        form.reset();
                        form.classList.remove("was-validated");
                        setTimeout(() => {
                            result.style.display = "none";
                        }, 5000);
                    });
            });
        }
    }

    customElements.define("contact-form", ContactForm);
</script>
